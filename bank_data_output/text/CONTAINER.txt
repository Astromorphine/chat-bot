Containers - ejabberd Docs
========================== - Overview
- Install
- Configure
- Advanced
- Development
- API
- Archive
- Roadmap
- OverviewOverviewFeaturesFAQUse CasesLicenseSecurityGlossaryQuickstart
- Features
- FAQ
- Use Cases
- License
- Security
- Glossary
- Quickstart
- InstallInstallContainersContainersStart ejabberddaemonwith Erlang consolewith your dataNext stepsRegister admin accountCheck ejabberd logInspect container filesOpen debug consoleCAPTCHAAdvancedPortsVolumesCommands on startMacros in environmentejabberd-contribejabberdapiClusteringChange Mnesia Node NameBuild Container ImageBuild ejabberdBuild ecsComposer ExamplesMinimal ExampleCustomized ExampleClustering ExampleImages ComparisonBinary InstallersOperating System PackageCompile Source CodeHomebrewMac OSXNext Steps
- ContainersContainersStart ejabberddaemonwith Erlang consolewith your dataNext stepsRegister admin accountCheck ejabberd logInspect container filesOpen debug consoleCAPTCHAAdvancedPortsVolumesCommands on startMacros in environmentejabberd-contribejabberdapiClusteringChange Mnesia Node NameBuild Container ImageBuild ejabberdBuild ecsComposer ExamplesMinimal ExampleCustomized ExampleClustering ExampleImages Comparison
- Start ejabberddaemonwith Erlang consolewith your data
- daemon
- with Erlang console
- with your data
- Next stepsRegister admin accountCheck ejabberd logInspect container filesOpen debug consoleCAPTCHA
- Register admin account
- Check ejabberd log
- Inspect container files
- Open debug console
- CAPTCHA
- AdvancedPortsVolumesCommands on startMacros in environmentejabberd-contribejabberdapiClusteringChange Mnesia Node Name
- Ports
- Volumes
- Commands on start
- Macros in environment
- ejabberd-contrib
- ejabberdapi
- Clustering
- Change Mnesia Node Name
- Build Container ImageBuild ejabberdBuild ecs
- Build ejabberd
- Build ecs
- Composer ExamplesMinimal ExampleCustomized ExampleClustering Example
- Minimal Example
- Customized Example
- Clustering Example
- Images Comparison
- Binary Installers
- Operating System Package
- Compile Source Code
- Homebrew
- Mac OSX
- Next Steps
- ConfigureConfigureFile FormatBasic ConfigurationAuthenticationDatabasesLDAPListen ModulesListen OptionsTop-Level OptionsModules Options
- File Format
- Basic Configuration
- Authentication
- Databases
- LDAP
- Listen Modules
- Listen Options
- Top-Level Options
- Modules Options
- AdvancedAdvancedArchitectureClusteringManagingModules / ContribSecurityTroubleshootingUpgradeTutorialsMIX tutorialMQTT tutorialMUC HatsMUC vCardsMySQL tutorial
- Architecture
- Clustering
- Managing
- Modules / Contrib
- Security
- Troubleshooting
- Upgrade
- Tutorials
- MIX tutorial
- MQTT tutorial
- MUC Hats
- MUC vCards
- MySQL tutorial
- DevelopmentDevelopmentDeveloper GuidePubsub DevSimplified Roster VersioningStanza RoutingSQL SchemaContributionsContributingContributor ConvenantContributorsDependenciesDocsElixir DevLivebookLocalizationModules DevelopmentMUC/Sub ExtensionTestingVSCodeXMPPFramework (iOS)
- Developer Guide
- Pubsub Dev
- Simplified Roster Versioning
- Stanza Routing
- SQL Schema
- Contributions
- Contributing
- Contributor Convenant
- Contributors
- Dependencies
- Docs
- Elixir Dev
- Livebook
- Localization
- Modules Development
- MUC/Sub Extension
- Testing
- VSCode
- XMPPFramework (iOS)
- APIAPIAPI ReferenceAPI TagsSimple ConfigurationPermissionsOAuth SupportCommandsVersioning
- API Reference
- API Tags
- Simple Configuration
- Permissions
- OAuth Support
- Commands
- Versioning
- ArchiveArchive25.0725.07API ReferenceAPI TagsListen ModulesListen OptionsModules OptionsTop-Level OptionsUpgrade to ejabberd 25.0725.0425.04API ReferenceAPI TagsListen ModulesListen OptionsModules OptionsTop-Level OptionsUpgrade to ejabberd 25.0425.0325.03API ReferenceAPI TagsListen ModulesListen OptionsModules OptionsTop-Level OptionsUpgrade to ejabberd 25.0324.1224.12API ReferenceAPI TagsListen ModulesListen OptionsModules OptionsTop-Level OptionsUpgrade to ejabberd 24.1224.1024.10API ReferenceAPI TagsListen ModulesListen OptionsModules OptionsTop-Level OptionsUpgrade to ejabberd 24.1024.0724.07API ReferenceAPI TagsListen ModulesListen OptionsModules OptionsTop-Level OptionsUpgrade to ejabberd 24.0724.0624.06API ReferenceAPI TagsListen ModulesListen OptionsModules OptionsTop-Level OptionsUpgrade to ejabberd 24.0624.0224.02API ReferenceAPI TagsListen ModulesListen OptionsModules OptionsTop-Level OptionsUpgrade to ejabberd 24.0223.1023.10API ReferenceAPI TagsListen OptionListen OptionsModules OptionsTop-Level OptionsUpgrade to ejabberd 23.1023.0423.04API ReferenceListen OptionListen OptionsModules OptionsTop-Level OptionsUpgrade to ejabberd 23.0423.0123.01API ReferenceListen OptionListen OptionsModules OptionsTop-Level OptionsUpgrade to ejabberd 23.0122.1022.10API ReferenceListen OptionListen OptionsModules OptionsTop-Level OptionsUpgrade to ejabberd 22.1022.0522.05API ReferenceListen OptionListen OptionsModules OptionsTop-Level OptionsUpgrade to ejabberd 22.0521.1221.12API ReferenceListen OptionListen OptionsModules OptionsTop-Level OptionsUpgrade to ejabberd 21.1221.0721.07API ReferenceListen OptionListen OptionsModules OptionsTop-Level OptionsUpgrade to ejabberd 21.0721.0421.04API ReferenceListen OptionListen OptionsModules OptionsTop-Level OptionsUpgrade to ejabberd 21.0421.0121.01API ReferenceListen OptionListen OptionsModules OptionsTop-Level Options20.1220.12API ReferenceListen OptionListen OptionsModules OptionsTop-Level Options20.0720.07API ReferenceListenListen OptionsModules OptionsTop-Level Options20.0420.04API ReferenceListen ModulesListen OptionsModules OptionsTop-Level Options20.0320.0320.0220.0220.0120.01Upgrade to ejabberd 20.01Older releasesOlder releasesUpgrade to ejabberd 19.08Upgrade to ejabberd 19.05Upgrade to ejabberd 19.02Upgrade to ejabberd 18.12Upgrade to ejabberd 18.09Upgrade to ejabberd 18.06Upgrade to ejabberd 18.04Upgrade to ejabberd 18.03Upgrade to ejabberd 18.01Upgrade to ejabberd 17.11Upgrade to ejabberd 17.09Upgrade to ejabberd 17.06Upgrade to ejabberd 17.03Upgrade to ejabberd 16.08Upgrade to ejabberd 16.06Upgrade to ejabberd 16.04Upgrade to ejabberd 16.03Upgrade to ejabberd 16.02Upgrade from 2.1.1x to 16.02Configure 20.03ChangeLog
- 25.0725.07API ReferenceAPI TagsListen ModulesListen OptionsModules OptionsTop-Level OptionsUpgrade to ejabberd 25.07
- API Reference
- API Tags
- Listen Modules
- Listen Options
- Modules Options
- Top-Level Options
- Upgrade to ejabberd 25.07
- 25.0425.04API ReferenceAPI TagsListen ModulesListen OptionsModules OptionsTop-Level OptionsUpgrade to ejabberd 25.04
- API Reference
- API Tags
- Listen Modules
- Listen Options
- Modules Options
- Top-Level Options
- Upgrade to ejabberd 25.04
- 25.0325.03API ReferenceAPI TagsListen ModulesListen OptionsModules OptionsTop-Level OptionsUpgrade to ejabberd 25.03
- API Reference
- API Tags
- Listen Modules
- Listen Options
- Modules Options
- Top-Level Options
- Upgrade to ejabberd 25.03
- 24.1224.12API ReferenceAPI TagsListen ModulesListen OptionsModules OptionsTop-Level OptionsUpgrade to ejabberd 24.12
- API Reference
- API Tags
- Listen Modules
- Listen Options
- Modules Options
- Top-Level Options
- Upgrade to ejabberd 24.12
- 24.1024.10API ReferenceAPI TagsListen ModulesListen OptionsModules OptionsTop-Level OptionsUpgrade to ejabberd 24.10
- API Reference
- API Tags
- Listen Modules
- Listen Options
- Modules Options
- Top-Level Options
- Upgrade to ejabberd 24.10
- 24.0724.07API ReferenceAPI TagsListen ModulesListen OptionsModules OptionsTop-Level OptionsUpgrade to ejabberd 24.07
- API Reference
- API Tags
- Listen Modules
- Listen Options
- Modules Options
- Top-Level Options
- Upgrade to ejabberd 24.07
- 24.0624.06API ReferenceAPI TagsListen ModulesListen OptionsModules OptionsTop-Level OptionsUpgrade to ejabberd 24.06
- API Reference
- API Tags
- Listen Modules
- Listen Options
- Modules Options
- Top-Level Options
- Upgrade to ejabberd 24.06
- 24.0224.02API ReferenceAPI TagsListen ModulesListen OptionsModules OptionsTop-Level OptionsUpgrade to ejabberd 24.02
- API Reference
- API Tags
- Listen Modules
- Listen Options
- Modules Options
- Top-Level Options
- Upgrade to ejabberd 24.02
- 23.1023.10API ReferenceAPI TagsListen OptionListen OptionsModules OptionsTop-Level OptionsUpgrade to ejabberd 23.10
- API Reference
- API Tags
- Listen Option
- Listen Options
- Modules Options
- Top-Level Options
- Upgrade to ejabberd 23.10
- 23.0423.04API ReferenceListen OptionListen OptionsModules OptionsTop-Level OptionsUpgrade to ejabberd 23.04
- API Reference
- Listen Option
- Listen Options
- Modules Options
- Top-Level Options
- Upgrade to ejabberd 23.04
- 23.0123.01API ReferenceListen OptionListen OptionsModules OptionsTop-Level OptionsUpgrade to ejabberd 23.01
- API Reference
- Listen Option
- Listen Options
- Modules Options
- Top-Level Options
- Upgrade to ejabberd 23.01
- 22.1022.10API ReferenceListen OptionListen OptionsModules OptionsTop-Level OptionsUpgrade to ejabberd 22.10
- API Reference
- Listen Option
- Listen Options
- Modules Options
- Top-Level Options
- Upgrade to ejabberd 22.10
- 22.0522.05API ReferenceListen OptionListen OptionsModules OptionsTop-Level OptionsUpgrade to ejabberd 22.05
- API Reference
- Listen Option
- Listen Options
- Modules Options
- Top-Level Options
- Upgrade to ejabberd 22.05
- 21.1221.12API ReferenceListen OptionListen OptionsModules OptionsTop-Level OptionsUpgrade to ejabberd 21.12
- API Reference
- Listen Option
- Listen Options
- Modules Options
- Top-Level Options
- Upgrade to ejabberd 21.12
- 21.0721.07API ReferenceListen OptionListen OptionsModules OptionsTop-Level OptionsUpgrade to ejabberd 21.07
- API Reference
- Listen Option
- Listen Options
- Modules Options
- Top-Level Options
- Upgrade to ejabberd 21.07
- 21.0421.04API ReferenceListen OptionListen OptionsModules OptionsTop-Level OptionsUpgrade to ejabberd 21.04
- API Reference
- Listen Option
- Listen Options
- Modules Options
- Top-Level Options
- Upgrade to ejabberd 21.04
- 21.0121.01API ReferenceListen OptionListen OptionsModules OptionsTop-Level Options
- API Reference
- Listen Option
- Listen Options
- Modules Options
- Top-Level Options
- 20.1220.12API ReferenceListen OptionListen OptionsModules OptionsTop-Level Options
- API Reference
- Listen Option
- Listen Options
- Modules Options
- Top-Level Options
- 20.0720.07API ReferenceListenListen OptionsModules OptionsTop-Level Options
- API Reference
- Listen
- Listen Options
- Modules Options
- Top-Level Options
- 20.0420.04API ReferenceListen ModulesListen OptionsModules OptionsTop-Level Options
- API Reference
- Listen Modules
- Listen Options
- Modules Options
- Top-Level Options
- 20.0320.03
- 20.0220.02
- 20.0120.01Upgrade to ejabberd 20.01
- Upgrade to ejabberd 20.01
- Older releasesOlder releasesUpgrade to ejabberd 19.08Upgrade to ejabberd 19.05Upgrade to ejabberd 19.02Upgrade to ejabberd 18.12Upgrade to ejabberd 18.09Upgrade to ejabberd 18.06Upgrade to ejabberd 18.04Upgrade to ejabberd 18.03Upgrade to ejabberd 18.01Upgrade to ejabberd 17.11Upgrade to ejabberd 17.09Upgrade to ejabberd 17.06Upgrade to ejabberd 17.03Upgrade to ejabberd 16.08Upgrade to ejabberd 16.06Upgrade to ejabberd 16.04Upgrade to ejabberd 16.03Upgrade to ejabberd 16.02Upgrade from 2.1.1x to 16.02
- Upgrade to ejabberd 19.08
- Upgrade to ejabberd 19.05
- Upgrade to ejabberd 19.02
- Upgrade to ejabberd 18.12
- Upgrade to ejabberd 18.09
- Upgrade to ejabberd 18.06
- Upgrade to ejabberd 18.04
- Upgrade to ejabberd 18.03
- Upgrade to ejabberd 18.01
- Upgrade to ejabberd 17.11
- Upgrade to ejabberd 17.09
- Upgrade to ejabberd 17.06
- Upgrade to ejabberd 17.03
- Upgrade to ejabberd 16.08
- Upgrade to ejabberd 16.06
- Upgrade to ejabberd 16.04
- Upgrade to ejabberd 16.03
- Upgrade to ejabberd 16.02
- Upgrade from 2.1.1x to 16.02
- Configure 20.03
- ChangeLog
- RoadmapRoadmap
- Start ejabberddaemonwith Erlang consolewith your data
- daemon
- with Erlang console
- with your data
- Next stepsRegister admin accountCheck ejabberd logInspect container filesOpen debug consoleCAPTCHA
- Register admin account
- Check ejabberd log
- Inspect container files
- Open debug console
- CAPTCHA
- AdvancedPortsVolumesCommands on startMacros in environmentejabberd-contribejabberdapiClusteringChange Mnesia Node Name
- Ports
- Volumes
- Commands on start
- Macros in environment
- ejabberd-contrib
- ejabberdapi
- Clustering
- Change Mnesia Node Name
- Build Container ImageBuild ejabberdBuild ecs
- Build ejabberd
- Build ecs
- Composer ExamplesMinimal ExampleCustomized ExampleClustering Example
- Minimal Example
- Customized Example
- Clustering Example
- Images Comparison # ejabberd Container Images¶
ejabberdis an open-source,
robust, scalable and extensible realtime platform built usingErlang/OTP,
that includesXMPPServer,MQTTBroker andSIPService. This page documents those container images (images comparison): - published inghcr.io/processone/ejabberd, built usingejabberdrepository, both for stable ejabberd releases and themasterbranch, in x64 and arm64 architectures.
published inghcr.io/processone/ejabberd, built usingejabberdrepository, both for stable ejabberd releases and themasterbranch, in x64 and arm64 architectures. - published indocker.io/ejabberd/ecs, built usingdocker-ejabberd/ecsrepository for ejabberd stable releases in x64 architectures.
published indocker.io/ejabberd/ecs, built usingdocker-ejabberd/ecsrepository for ejabberd stable releases in x64 architectures. For Microsoft Windows, seeDocker Desktop for Windows 10,
andDocker Toolbox for Windows 7. For Kubernetes Helm, seehelp-ejabberd. ## Start ejabberd¶ ### daemon¶
Start ejabberd in a new container: That runs the container as a daemon,
using ejabberd default configuration file and XMPP domainlocalhost. Restart the stopped ejabberd container: Stop the running container: Remove the ejabberd container: ### with Erlang console¶
Start ejabberd with an interactive Erlang console attached using thelivecommand: That uses the default configuration file and XMPP domainlocalhost. ### with your data¶
Pass a configuration file as a volume
and share the local directory to store database: Notice that ejabberd runs in the container with an account namedejabberdwith UID 9000 and groupejabberdwith GID 9000,
and the volumes you mount must grant proper rights to that account. ## Next steps¶ ### Register admin account¶ #### ¶
If you set theREGISTER_ADMIN_PASSWORDenvironment variable,
an account is automatically registered with that password,
and admin privileges are granted to it.
The account created depends on what variables you have set: - EJABBERD_MACRO_ADMIN=juliet@example.org->juliet@example.org
- EJABBERD_MACRO_HOST=example.org->admin@example.org
- None of those variables are set ->admin@localhost
The account registration is shown in the container log: Alternatively, you can register the account manually yourself
and editconf/ejabberd.ymland add the ACL as explained inejabberd Docs: Administration Account. #### ¶
The default ejabberd configuration has already granted admin privilege
to an account that would be calledadmin@localhost,
so you just need to register it, for example: ### Check ejabberd log¶
Check the content of the log files inside the container,
even if you do not put it on a shared persistent drive: ### Inspect container files¶
The container uses Alpine Linux. Start a shell inside the container: ### Open debug console¶
Open an interactive debug Erlang console attached to a running ejabberd in a running container: ### CAPTCHA¶
ejabberd includes two example CAPTCHA scripts.
If you want to use any of them, first install some additional required libraries: Now update your ejabberd configuration file, for example:dockerexec-itejabberdviconf/ejabberd.yml and add this option:captcha_cmd:"$HOME/bin/captcha.sh" Finally, reload the configuration file or restart the container:dockerexecejabberdejabberdctlreload_config If the CAPTCHA image is not visible, there may be a problem generating it
(the ejabberd log file may show some error message);
or the image URL may not be correctly detected by ejabberd,
in that case you can set the correct URL manually, for example:captcha_url:https://localhost:5443/captcha For more details about CAPTCHA options, please check theCAPTCHAdocumentation section. ## Advanced¶ ### Ports¶
The container image exposes several ports
(check alsoDocs: Firewall Settings): - 5222: The default port for XMPP clients.
- 5269: For XMPP federation. Only needed if you want to communicate with users on other servers.
- 5280: For admin interface (URL isadmin/).
- 1880: For admin interface (URL is/, useful forpodman-desktopanddocker-desktop)
- 5443: With encryption, used for admin interface, API, CAPTCHA, OAuth, Websockets and XMPP BOSH.
- 1883: Used for MQTT
- 4369-4399: EPMD and Erlang connectivity, used forejabberdctland clustering
- 5210: Erlang connectivity whenERL_DIST_PORTis set, alternative to EPMD ### Volumes¶
ejabberd produces two types of data: log files and database spool files (Mnesia).
This is the kind of data you probably want to store on a persistent or local drive (at least the database). The volumes you may want to map: - /opt/ejabberd/conf/: Directory containing configuration and certificates
- /opt/ejabberd/database/: Directory containing Mnesia database.
You should back up or export the content of the directory to persistent storage
(host storage, local storage, any storage plugin)
- /opt/ejabberd/logs/: Directory containing log files
- /opt/ejabberd/upload/: Directory containing uploaded files. This should also be backed up.
All these files are owned by an account namedejabberdwith groupejabberdin the container.
Its correspondingUID:GIDis9000:9000.
If you prefer bind mounts instead of volumes, then
you need to map this to validUID:GIDon your host to get read/write access on
mounted directories. If using Docker, try:mkdirdatabasesudochown9000:9000database If using Podman, try:mkdirdatabasepodmanunsharechown9000:9000database It's possible to install additional ejabberd modules using volumes, checkthis Docs tutorial. ### Commands on start¶
The ejabberdctl script reads theCTL_ON_CREATEenvironment variable
the first time the container is started,
and readsCTL_ON_STARTevery time the container is started.
Those variables can contain one ejabberdctl command,
or several commands separated with the blankspace and;characters. If any of those commands returns a failure, the container starting gets aborted.
If there is a command with a result that can be ignored,
prefix that command with! This example, registers anadmin@localhostaccount when the container is first created.
Everytime the container starts, it shows the list of registered accounts,
checks that the admin account exists and password is valid,
changes the password of an account if it exists (ignoring any failure),
and shows the ejabberd starts (check also thefull example):environment:-CTL_ON_CREATE=register admin localhost asd-CTL_ON_START=stats registeredusers ;check_password admin localhost asd ;! change_password bot123 localhost qqq ;status ### Macros in environment¶
ejabberd readsEJABBERD_MACRO_*environment variables
and uses them to define the correspondingmacros,
overwriting the corresponding macro definition if it was set in the configuration file.
This is supported since ejabberd 24.12. For example, if you configure this inejabberd.yml: now you can define the admin account JID using an environment variable:environment:-EJABBERD_MACRO_ADMIN=admin@localhost Check thefull examplefor other example. ### ejabberd-contrib¶
This section addresses those topics related toejabberd-contrib: - Download source code
- Install a module
- Install git for dependencies
- Install your module #### Download source code¶
Theejabberdcontainer image includes the ejabberd-contrib git repository source code,
butecsdoes not, so first download it:$dockerexecejabberdejabberdctlmodules_update_specs #### Install a module¶
Compile and install any of the contributed modules, for example:dockerexecejabberdejabberdctlmodule_installmod_statsdxModulemod_statsdxhasbeeninstalledandstarted.It'sconfiguredinthefile:/opt/ejabberd/.ejabberd-modules/mod_statsdx/conf/mod_statsdx.ymlConfigurethemoduleinthatfile,orremoveitandconfigureinyourmainejabberd.yml #### Install git for dependencies¶
Some modules depend on erlang libraries,
but the container images do not includegitormixto download them.
Consequently, when you attempt to install such a module,
there will be error messages like: the solution is to installgitin the container image: and now you can upgrade the module: #### Install your module¶
If youdeveloped an ejabberd module,
you can install it in your container image: - Create a local directory forejabberd-modules:mkdirdocker-modules
Create a local directory forejabberd-modules: - Then create the directory structure for your custom module:cddocker-modulesmkdir-psources/mod_hello_world/touchsources/mod_hello_world/mod_hello_world.specmkdirsources/mod_hello_world/src/mvmod_hello_world.erlsources/mod_hello_world/src/mkdirsources/mod_hello_world/conf/echo-e"modules:\n mod_hello_world: {}">sources/mod_hello_world/conf/mod_hello_world.ymlcd..
Then create the directory structure for your custom module: - Grant ownership of that directory to the UID that ejabberd will use inside the Docker image:sudochown9000-Rdocker-modules/
Grant ownership of that directory to the UID that ejabberd will use inside the Docker image: - Start ejabberd in the container:sudodockerrun\--namehellotest\-d\--volume"$(pwd)/docker-modules:/home/ejabberd/.ejabberd-modules/"\-p5222:5222\-p5280:5280\ejabberd/ecs
Start ejabberd in the container: - Check the module is available for installing, and then install it:sudodockerexec-ithellotestejabberdctlmodules_availablemod_hello_world[]sudodockerexec-ithellotestejabberdctlmodule_installmod_hello_world
Check the module is available for installing, and then install it: - If the module works correctly, you will seeHelloin the ejabberd logs when it starts:sudodockerexec-ithellotestgrepHellologs/ejabberd.log2020-10-0613:40:13.154335+00:00[info]<0.492.0>@mod_hello_world:start/2:15Hello,ejabberdworld!
If the module works correctly, you will seeHelloin the ejabberd logs when it starts: ### ejabberdapi¶
When the container is running (and thus ejabberd), you can exec commands inside the container
usingejabberdctlor any other of the available interfaces, seeUnderstanding ejabberd "commands" Additionally, the container image includes theejabberdapiexecutable.
Please check theejabberd-api homepagefor configuration and usage details. For example, if you configure ejabberd like this:listen:-port:5282module:ejabberd_httprequest_handlers:"/api":mod_http_apiacl:loopback:ip:-127.0.0.0/8-::1/128-::FFFF:127.0.0.1/128api_permissions:"adminaccess":who:access:allow:acl:loopbackwhat:-"register" Then you could register new accounts with this query: ### Clustering¶
When setting several containers to form acluster of ejabberd nodes,
each one must have a differentErlang Node Nameand the sameErlang Cookie. For this you can either: - editconf/ejabberdctl.cfgand set variablesERLANG_NODEandERLANG_COOKIE
- set the environment variablesERLANG_NODE_ARGandERLANG_COOKIE
Example to connect a localejabberdctlto a containerized ejabberd: - When creating the container, export port 5210, and setERLANG_COOKIE:dockerrun--nameejabberd-it\-eERLANG_COOKIE=`cat$HOME/.erlang.cookie`\-p5210:5210-p5222:5222\ghcr.io/processone/ejabberd
- SetERL_DIST_PORT=5210inejabberdctl.cfgof container and local ejabberd
- Restart the container
- Now useejabberdctlin your local ejabberd deployment
To connect using a localejabberdscript:ERL_DIST_PORT=5210_build/dev/rel/ejabberd/bin/ejabberdping Example using environment variables (see full exampledocker-compose.yml):environment:-ERLANG_NODE_ARG=ejabberd@node7-ERLANG_COOKIE=dummycookie123 Once you have the ejabberd nodes properly set and running,
you can tell the secondary nodes to join the master node using thejoin_clusterAPI call. Example using environment variables (see the fulldocker-compose.ymlclustering example):environment:-ERLANG_NODE_ARG=ejabberd@replica-ERLANG_COOKIE=dummycookie123-CTL_ON_CREATE=join_cluster ejabberd@main ### Change Mnesia Node Name¶
To use the same Mnesia database in a container with a different hostname,
it is necessary to change the old hostname stored in Mnesia. This section is equivalent to the ejabberd DocumentationChange Computer Hostname,
but particularized to containers that use thisecscontainer image from ejabberd 23.01 or older. #### Setup Old Container¶
Let's assume a container running ejabberd 23.01 (or older) from
thisecscontainer image, with the database directory binded
and one registered account.
This can be produced with:OLDCONTAINER=ejaoldNEWCONTAINER=ejanewmkdirdatabasesudochown9000:9000databasedockerrun-d--name$OLDCONTAINER-p5222:5222\-v$(pwd)/database:/opt/ejabberd/database\ghcr.io/processone/ejabberd:23.01dockerexec-it$OLDCONTAINERejabberdctlstarteddockerexec-it$OLDCONTAINERejabberdctlregisteruser1localhostsomepassdockerexec-it$OLDCONTAINERejabberdctlregistered_userslocalhost Methods to know the Erlang node name:lsdatabase/|grepejabberd@dockerexec-it$OLDCONTAINERejabberdctlstatusdockerexec-it$OLDCONTAINERgrep"started in the node"logs/ejabberd.log #### Change Mnesia Node¶
First of all let's store the Erlang node names and paths in variables.
In this example they would be:OLDCONTAINER=ejaoldNEWCONTAINER=ejanewOLDNODE=ejabberd@95145ddee27cNEWNODE=ejabberd@localhostOLDFILE=/opt/ejabberd/database/old.backupNEWFILE=/opt/ejabberd/database/new.backup - Start your old container that can still read the Mnesia database correctly.
If you have the Mnesia spool files,
but don't have access to the old container anymore, go toCreate Temporary Containerand later come back here.
Start your old container that can still read the Mnesia database correctly.
If you have the Mnesia spool files,
but don't have access to the old container anymore, go toCreate Temporary Containerand later come back here. - Generate a backup file and check it was created:dockerexec-it$OLDCONTAINERejabberdctlbackup$OLDFILEls-ldatabase/*.backup
Generate a backup file and check it was created:dockerexec-it$OLDCONTAINERejabberdctlbackup$OLDFILEls-ldatabase/*.backup - Stop ejabberd:dockerstop$OLDCONTAINER
Stop ejabberd:dockerstop$OLDCONTAINER - Create the new container. For example:dockerrun\--name$NEWCONTAINER\-d\-p5222:5222\-v$(pwd)/database:/opt/ejabberd/database\ghcr.io/processone/ejabberd:latest
Create the new container. For example:dockerrun\--name$NEWCONTAINER\-d\-p5222:5222\-v$(pwd)/database:/opt/ejabberd/database\ghcr.io/processone/ejabberd:latest - Convert the backup file to new node name:dockerexec-it$NEWCONTAINERejabberdctlmnesia_change_nodename$OLDNODE$NEWNODE$OLDFILE$NEWFILE
Convert the backup file to new node name:dockerexec-it$NEWCONTAINERejabberdctlmnesia_change_nodename$OLDNODE$NEWNODE$OLDFILE$NEWFILE - Install the backup file as a fallback:dockerexec-it$NEWCONTAINERejabberdctlinstall_fallback$NEWFILE
Install the backup file as a fallback:dockerexec-it$NEWCONTAINERejabberdctlinstall_fallback$NEWFILE - Restart the container:dockerrestart$NEWCONTAINER
Restart the container:dockerrestart$NEWCONTAINER - Check that the information of the old database is available.
In this example, it should show that the accountuser1is registered:dockerexec-it$NEWCONTAINERejabberdctlregistered_userslocalhost
Check that the information of the old database is available.
In this example, it should show that the accountuser1is registered:dockerexec-it$NEWCONTAINERejabberdctlregistered_userslocalhost - When the new container is working perfectly with the converted Mnesia database,
you may want to remove the unneeded files:
the old container, the old Mnesia spool files, and the backup files.
When the new container is working perfectly with the converted Mnesia database,
you may want to remove the unneeded files:
the old container, the old Mnesia spool files, and the backup files. #### Create Temporary Container¶
In case the old container that used the Mnesia database is not available anymore,
a temporary container can be created just to read the Mnesia database
and make a backup of it, as explained in the previous section. This method uses--hostnamecommand line argument for docker,
andERLANG_NODE_ARGenvironment variable for ejabberd.
Their values must be the hostname of your old container
and the Erlang node name of your old ejabberd node.
To know the Erlang node name please checkSetup Old Container. Command line example:OLDHOST=${OLDNODE#*@}dockerrun\-d\--name$OLDCONTAINER\--hostname$OLDHOST\-p5222:5222\-v$(pwd)/database:/opt/ejabberd/database\-eERLANG_NODE_ARG=$OLDNODE\ghcr.io/processone/ejabberd:latest Check the old database content is available:dockerexec-it$OLDCONTAINERejabberdctlregistered_userslocalhost Now that you have ejabberd running with access to the Mnesia database,
you can continue with step 2 of previous sectionChange Mnesia Node. ## Build Container Image¶
The container image includes ejabberd as a standalone OTP release built using Elixir. ### Buildejabberd¶
The ejabberd Erlang/OTP release is configured with: - mix.exs: Customize ejabberd release
- vars.config: ejabberd compilation configuration options
- config/runtime.exs: Customize ejabberd paths
- ejabberd.yml.template: ejabberd default config file #### Direct build¶
Build ejabberd Community Server container image from ejabberd master git repository: #### Podman build¶
To build the image using Podman, please notice: - EXPOSE 4369-4399port range is not supported, remove that in Dockerfile
- It mentions thathealthcheckis not supported by the Open Container Initiative image format
- to start with commandlive, you may want to add environment variableEJABBERD_BYPASS_WARNINGS=true ### Buildecs¶
The ejabberd Erlang/OTP release is configured with: - rel/config.exs: Customize ejabberd release
- rel/dev.exs: ejabberd environment configuration for development release
- rel/prod.exs: ejabberd environment configuration for production release
- vars.config: ejabberd compilation configuration options
- conf/ejabberd.yml: ejabberd default config file
Build ejabberd Community Server base image from ejabberd master on Github: Build ejabberd Community Server base image for a given ejabberd version: ## Composer Examples¶ ### Minimal Example¶
This is the barely minimal file to get a usable ejabberd. If using Docker, write thisdocker-compose.ymlfile
and start it withdocker-compose up: If using Podman, write thisminimal.ymlfile
and start it withpodman kube play minimal.yml: ### Customized Example¶
This example shows the usage of several customizations:
it uses a local configuration file,
defines a configuration macro using an environment variable,
stores the mnesia database in a local path,
registers an account when it's created,
and checks the number of registered accounts every time it's started. Prepare an ejabberd configuration file:mkdirconf&&cpejabberd.yml.exampleconf/ejabberd.yml Create the database directory and allow the container access to it: - Docker:mkdirdatabase&&sudochown9000:9000database
- Podman:mkdirdatabase&&podmanunsharechown9000:9000database
If using Docker, write thisdocker-compose.ymlfile
and start it withdocker-compose up: If using Podman, write thiscustom.ymlfile
and start it withpodman kube play custom.yml: ### Clustering Example¶
In this example, the main container is created first.
Once it is fully started and healthy, a second container is created,
and once ejabberd is started in it, it joins the first one. An account is registered in the first node when created (and
we ignore errors that can happen when doing that - for example
when account already exists),
and it should exist in the second node after join. Notice that in this example the main container does not have access
to the exterior; the replica exports the ports and can be accessed. If using Docker, write thisdocker-compose.ymlfile
and start it withdocker-compose up: If using Podman, write thiscluster.ymlfile
and start it withpodman kube play cluster.yml: ## Images Comparison¶
Let's summarize the differences between both container images. Legend: - is the recommended alternative
- added in the latest release (ejabberd 25.03)
- added in the previous release (ejabberd 24.12)
- added in the pre-previous release (ejabberd 24.10)


----------
Дата извлечения: 2025-07-15 20:48:17
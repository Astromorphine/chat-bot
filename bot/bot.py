
# –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API telegram
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from telegram import ReplyKeyboardMarkup
from telegram.constants import ChatAction

# –ë–∞–∑–æ–≤—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import os
from dotenv import load_dotenv

# LangChain

from langchain_core.prompts import PromptTemplate
from langchain.llms import OpenAI
from langchain.chains import ConversationChain
from langchain.memory import ConversationBufferMemory

from packages.app_context import AppContext
from packages.qa_simple_bot import QAgent

UPLOAD_FOLDER = "temp_files"
MODE_QUESTION = 0
MODE_RAG_QUESTION = 1
MODE_UPLOAD = 2
MODE_LINK_PARSE = 3
ALLOWED_EXTENSIONS = {".pdf", ".docx", ".txt"}

if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

def get_main_keyboard():
    return ReplyKeyboardMarkup(
        [["‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å","üìù –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π", "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", "üåê –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"]],
        resize_keyboard=True,
        one_time_keyboard=False
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:", reply_markup=get_main_keyboard())

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):

    text = update.message.text
    
    if text == "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª":
        await set_upload_mode(update, context)
        return
    elif text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
        await set_question_mode(update, context)
        return
    elif text == "üåê –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã":
        await set_link_parse_mode(update, context)
        return
    elif text == "üìù –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π":
        await set_rag_search_mode(update, context)
        return

    current_mode = context.user_data.get("mode", MODE_QUESTION)

    if current_mode == MODE_QUESTION:

        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
        thinking_msg = await update.message.reply_text("ü§î –î—É–º–∞—é...")

        agent = QAgent()
        response = agent.ask(text)

        await context.bot.delete_message(
            chat_id=update.effective_chat.id,
            message_id=thinking_msg.message_id
        )

        await update.message.reply_text(response, parse_mode="Markdown")

    elif current_mode == MODE_RAG_QUESTION:
        
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
        thinking_msg = await update.message.reply_text("ü§î –î—É–º–∞—é...")

        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ app_context
        app_context = context.bot_data["app_context"]
        response = app_context.bot_handler.handle_question(text)

        await context.bot.delete_message(
            chat_id=update.effective_chat.id,
            message_id=thinking_msg.message_id
        )

        await update.message.reply_text(response, parse_mode="Markdown")

    elif current_mode == MODE_LINK_PARSE:
        
        if is_url_reachable(text):
            await update.message.reply_text("–°—Å—ã–ª–∫–∞ –≤–∞–ª–∏–¥–Ω–∞", parse_mode="Markdown")
            app_context = context.bot_data["app_context"]
            #tokenizer = app_context.tokenizer
            doc_proccesor = app_context.doc_proccesor
            #embedding_generator = app_context.embedding_generator
            html_poccessor = app_context.html_poccessor
            await html_poccessor.process_url(text)
            chunks = doc_proccesor.process_pdf_documents(html_poccessor.doc_path)
            app_context.lance_db.connect_db()
            app_context.lance_db.select_table()
            app_context.lance_db.fill_table("pdf_chunks",chunks)
        else:
            await update.message.reply_text("–°—Å—ã–ª–∫–∞ –Ω–µ –≤–∞–ª–∏–¥–Ω–∞", parse_mode="Markdown")

    else: 
        await update.message.reply_text(f"–ò–∑–º–µ–Ω–∏—Ç–µ —Ä–µ–∂–∏–º –Ω–∞ —Ä–µ–∂–∏–º –∑–∞–¥–∞—á–∏ –≤–æ–ø—Ä–æ—Å–æ–≤")

async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):

    if context.user_data.get("mode") != MODE_UPLOAD:
        await update.message.reply_text(
            "–°–Ω–∞—á–∞–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —Ä–µ–∂–∏–º –∑–∞–≥—Ä—É–∑–∫–∏!",
            reply_markup=get_main_keyboard()
        )
        return

    file = await update.message.document.get_file()

    if file.file_size > 10 * 1024 * 1024:  # 10 –ú–ë
        await update.message.reply_text("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π.")
        return

    if not any(file.file_path.endswith(ext) for ext in ALLOWED_EXTENSIONS):
        await update.message.reply_text("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ PDF/DOCX/TXT.")
        return

    file_path = os.path.join(UPLOAD_FOLDER, update.message.document.file_name)
    await file.download_to_drive(file_path)

    response = f"{update.message.document.file_name} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω"

    await update.message.reply_text(response)

    os.remove(file_path)

async def set_upload_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["mode"] = MODE_UPLOAD
    await update.message.reply_text(
        "üì§ –†–µ–∂–∏–º –∑–∞–≥—Ä—É–∑–∫–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF/DOCX/TXT —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å¬ª.",
        reply_markup=get_main_keyboard()
    )

async def set_link_parse_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["mode"] = MODE_LINK_PARSE
    await update.message.reply_text(
        "üåê –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ—Å—É—Ä—Å –∏ –±–æ—Ç —Å–º–æ–∂–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.",
        reply_markup=get_main_keyboard()
    )

async def set_question_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["mode"] = MODE_QUESTION
    await update.message.reply_text(
        "‚ùì –†–µ–∂–∏–º –≤–æ–ø—Ä–æ—Å–æ–≤. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª¬ª.",
        reply_markup=get_main_keyboard()
    )

async def set_rag_search_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["mode"] = MODE_RAG_QUESTION
    await update.message.reply_text(
        "üìù –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å, –∞–≥–µ–Ω—Ç –ø—Ä–æ–∏–∑–≤–µ–¥—ë—Ç –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É.",
        reply_markup=get_main_keyboard()
    )

import requests

def is_url_reachable(url: str, timeout: float = 3.0) -> bool:
    try:
        response = requests.head(url, allow_redirects=True, timeout=timeout)
        return response.status_code == 200
    except requests.RequestException:
        return False

def main():

    path = os.path.join(os.path.dirname(__file__), "..\\.env")
    load_dotenv(path)
    TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

    app = Application.builder().token(TELEGRAM_TOKEN).build()

    app_context = AppContext()
    app.bot_data["app_context"] = app_context
    
    app.add_handler(MessageHandler(filters.Document.ALL, handle_file))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    app_context.logger.info("–ë–æ—Ç –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã")

    app.run_polling()

if __name__ == "__main__":
    main()
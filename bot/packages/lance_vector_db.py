import os
import time
import random
import pandas as pd
import pyarrow as pa
import lancedb
from typing import List
from packages.i_classes.i_logger import ILogger
from packages.i_classes.i_vector_db import IVEctorDB
from packages.i_classes.i_embedding_generator import IEmbeddingGenerator
import ipywidgets as widgets
from IPython.display import display, clear_output, Markdown, HTML
from dotenv import load_dotenv
from tenacity import retry, stop_after_attempt, wait_exponential, retry_if_exception_type

from openai import OpenAI
import openai

class LanceVectorDB(IVEctorDB):
    def __init__(self, logger: ILogger, embedding_generator : IEmbeddingGenerator, table_name: None ) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ª–æ–≥–≥–µ—Ä–æ–º.
        """
        self.logger = logger
        self.embedding_generator = embedding_generator
        self.db = None
        self.table = None
        self.table_name = table_name
        
        path = os.path.join(os.path.dirname(__file__), "..\\.env")
        load_dotenv(path)
        self.OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")


    def connect_db(self, db_path: str = "data/lancedb"):
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö LanceDB.
        
        Args:
            db_path: –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
        """
        try:
            self.db = lancedb.connect(db_path)
            self.logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö {db_path}")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise

    def select_table(self):
        try:
            self.table = self.db.open_table(self.table_name)
            self.logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ: {self.table_name}")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ nf,kbwt: {e}")
            raise

    def create_table(self, table_name: str = "pdf_chunks"):
        """
        –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –≤ LanceDB.
        
        Args:
            db_connection: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            table_name: –∏–º—è —Ç–∞–±–ª–∏—Ü—ã.
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã —Ç–∞–±–ª–∏—Ü—ã (—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º PyArrow –∏–ª–∏ —Å—Ö–æ–∂–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∞)
            schema = pa.schema([
                pa.field("text", pa.string()),
                pa.field("vector", pa.list_(pa.float32(), 1536)),
                pa.field("doc_name", pa.string()),
                pa.field("chunk_id", pa.int32())
            ])
            self.table = self.db.create_table(table_name, schema=schema)
            self.logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ '{table_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
            raise

    def fill_table(self,table_name , chunks: List[dict]):
        """
        –ó–∞–ø–æ–ª–Ω—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –≤–µ–∫—Ç–æ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
        
        Args:
            chunks: —Å–ø–∏—Å–æ–∫ —á–∞–Ω–∫–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.
        """
        self.table = self.db.open_table(self.table_name)
        '''
        try:
            self.logger.info(f"üîÑ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã {table_name} —á–∞–Ω–∫–∞–º–∏...")
            for i, chunk in enumerate(chunks):
                vector = self.embedding_generator.create_embedding(chunk.text)  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
                chunk = vector
                
                # –î–æ–±–∞–≤–ª—è–µ–º —á–∞–Ω–∫ –≤ —Ç–∞–±–ª–∏—Ü—É
                self.table.add([chunk])
                self.logger.info(f"‚úÖ –ß–∞–Ω–∫ {i+1} –¥–æ–±–∞–≤–ª–µ–Ω.")
                time.sleep(random.uniform(0.5, 1.5))  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–∞–Ω–∫–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É: {e}")
            raise
        '''
        self.logger.info("üîÑ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —á–∞–Ω–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è...")
        processed_chunks = []

        for i, chunk in enumerate(chunks):
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —á–∞–Ω–∫–∞
            if hasattr(chunk, "text"):
                chunk_text = chunk.text
            else:
                chunk_text = str(chunk)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º
            doc_name = "unknown"
            if hasattr(chunk, "metadata") and isinstance(chunk.metadata, dict) and "file_name" in chunk.metadata:
                doc_name = chunk.metadata["file_name"]
            else:
                doc_name = f"doc_{i // 2}"  # –ü—Ä–æ—Å—Ç–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –µ—Å–ª–∏ –Ω–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            
            processed_chunks.append({
                "text": chunk_text,
                "doc_name": doc_name,
                "chunk_id": i
            })

        progress = widgets.IntProgress(
            value=0,
            min=0,
            max=len(processed_chunks),
            description='–ü—Ä–æ–≥—Ä–µ—Å—Å:',
            bar_style='info',
            orientation='horizontal'
        )
        display(progress)
        
        # –°—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
        successful_chunks = 0
        print(processed_chunks)

        print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É ({len(processed_chunks)} —á–∞–Ω–∫–æ–≤)...")
        for i, chunk in enumerate(processed_chunks):
            chunk_preview = chunk["text"][:30].replace("\n", " ") + "..."
            print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–∞ {i+1}/{len(processed_chunks)}: '{chunk_preview}'")
            
            try:
                # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞–Ω–∫–∞
                print(f"   üßÆ –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞...")
                vector = self.create_embedding(chunk["text"])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ–∫—Ç–æ—Ä –∫ –¥–∞–Ω–Ω—ã–º —á–∞–Ω–∫–∞
                chunk_to_add = chunk.copy()
                chunk_to_add["vector"] = vector
                
                # –î–æ–±–∞–≤–ª—è–µ–º —á–∞–Ω–∫ –≤ —Ç–∞–±–ª–∏—Ü—É
                print(f"   üíæ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É...")
                self.table.add([chunk_to_add])
                
                print(f"‚úÖ –ß–∞–Ω–∫ {i+1} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É.")
                successful_chunks += 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                progress.value = i + 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limits
                time.sleep(random.uniform(0.5, 1.5))
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞–Ω–∫–∞ {i+1}: {str(e)}")
                print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            
        print(f"\nüéâ –ì–æ—Ç–æ–≤–æ! {successful_chunks} –∏–∑ {len(processed_chunks)} —á–∞–Ω–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É {table_name}")
        

    def search_in_table(self, query_text: str, limit: int = 3):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É.

        Args:
            query_text: —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞.
            limit: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
        """
        try:
            # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            query_embedding = self.embedding_generator.create_embedding(query_text)
            self.logger.info(f"üß† –≠–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–∑–¥–∞–Ω, —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {len(query_embedding)}")

            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
            results = self.table.search(query_embedding).limit(limit).to_pandas()
            self.logger.info(f"üîé –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")

            return results
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
            raise

    def display_search_results(self, results: pd.DataFrame):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ –∫—Ä–∞—Å–∏–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
        
        Args:
            results: DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞.
        """
        if results.empty:
            self.logger.info("‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        self.logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        for i, row in results.iterrows():
            text_preview = row['text'][:300].replace("\n", "<br>")
            self.logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç #{i+1}:")
            self.logger.info(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {row['doc_name']}")
            self.logger.info(f"   ID —á–∞–Ω–∫–∞: {row['chunk_id']}")
            self.logger.info(f"   –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {row['_distance']:.4f}")
            self.logger.info(f"   –¢–µ–∫—Å—Ç: {text_preview}...")

    def interactive_search(self, db_path: str = "data/lancedb"):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
        
        Args:
            db_path: –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
            table_name: –∏–º—è —Ç–∞–±–ª–∏—Ü—ã.
        """
        self.create_or_connect_db(db_path)
        self.create_table(self.db, self.table_name)

        while True:
            query_text = input("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ (–∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞): ")
            if query_text.lower() == 'exit':
                break

            results = self.search_in_table(query_text)
            self.display_search_results(results)

    @retry(
        stop=stop_after_attempt(5),
        wait=wait_exponential(multiplier=1, min=1, max=60),
        retry=retry_if_exception_type((openai.RateLimitError, openai.APIError, openai.APIConnectionError))
    )
    def create_embedding(self, text):
        """
        –°–æ–∑–¥–∞–µ—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI API.
        
        –§—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä retry –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–∞
        –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö API (rate limits, timeout –∏ —Ç.–¥.)
        
        Args:
            text: —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
            
        Returns:
            –í–µ–∫—Ç–æ—Ä —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
        """

        client = OpenAI(api_key=self.OPENAI_API_KEY)

        response = client.embeddings.create(
            model="text-embedding-3-large",
            input=text,
            dimensions=1536
        )
        return response.data[0].embedding
    

    def search_in_table(self, query_text, limit=3):
        """
        –ü–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ LanceDB –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É.
        
        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
        1. –°–æ–∑–¥–∞–µ—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ 
        2. –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ—Å–µ–¥–µ–π
        3. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        
        Args:
            query_text (str): –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            table: –¢–∞–±–ª–∏—Ü–∞ LanceDB –¥–ª—è –ø–æ–∏—Å–∫–∞
            limit (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            pandas.DataFrame: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        """
        print(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å: '{query_text}'")
        
        try:
            # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            print("üß† –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞...")
            query_embedding = self.create_embedding(query_text)
            print(f"‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥ —Å–æ–∑–¥–∞–Ω, —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {len(query_embedding)}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —ç–º–±–µ–¥–¥–∏–Ω–≥—É
            print(f"üîé –ò—â–µ–º {limit} –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤...")
            results = self.table.search(query_embedding).limit(limit).to_pandas()
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return results
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")
            raise
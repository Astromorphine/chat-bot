import os, sys
import pdfplumber
from pathlib import Path

from docling.chunking import HybridChunker
from docling.document_converter import DocumentConverter

PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
sys.path.append(PROJECT_ROOT)

from packages.i_classes.i_document_proccesor import IDocumentProccesor
from packages.i_classes.i_logger import ILogger
from packages.embedding_generator import OpenAITokenizerWrapper

from common.paths import PDF_DIR, LOG_DIR, PDF_FILES

class DocumentProccesor(IDocumentProccesor):

    def __init__(self, logger : ILogger, tokenizer : OpenAITokenizerWrapper, max_tokens : int):
        self.logger = logger
        self.tokenizer = tokenizer
        self.max_tokens = max_tokens

    def convert_pdf_to_document(self, pdf_path: Path):
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç PDF –≤ —Ñ–æ—Ä–º–∞—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ docling.
        
        Args:
            pdf_path: –ø—É—Ç—å –∫ PDF-—Ñ–∞–π–ª—É
            
        Returns:
            –û–±—ä–µ–∫—Ç docling —Å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
        """
        converter = DocumentConverter()
        
        if not str(pdf_path).startswith('http'):
            pdf_path = Path(pdf_path).resolve()
        
        return converter.convert(pdf_path)
    
    def pdf_validation(self, pdf_path):
    
        with pdfplumber.open(pdf_path) as pdf:

            if len(pdf.pages) >= 20:
                raise ValueError("–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å pdf —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å—é –Ω–µ –±–æ–ª–µ–µ 20 —Å—Ç—Ä–∞–Ω–∏—Ü")

        return pdf_path


    def process_pdf_documents(self, pdf_files: list[Path] = None):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ PDF-–¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
        –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–π pdf_files –∏–ª–∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—Å—è PDF_FILES –∏–∑ common/paths.py
        Returns:
            –°–ø–∏—Å–æ–∫ —á–∞–Ω–∫–æ–≤ –∏–∑ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        """
        pdf_files = [pdf_files] or list(PDF_FILES)

        if not pdf_files:
            self.logger.critical("‚ùå –í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ PDF-—Ñ–∞–π–ª–æ–≤")
            return []
        
        all_chunks = []
        
        for pdf_file in pdf_files:
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞—Ä–∞–Ω–µ–µ. –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–º –æ—à–∏–±–∫—É –¥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è chunks —Ç–æ try except –ø–æ–ª—É—á–∏—Ç –æ—à–∏–±–∫—É –≤ –±–ª–æ–∫–µ finally
            chunks = []

            try:
                self.logger.info(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {pdf_file}")
                result = self.convert_pdf_to_document(pdf_file)

                chunker = HybridChunker(
                    tokenizer=self.tokenizer,
                    max_tokens=self.max_tokens,
                    merge_peers=True,
                )
                

                chunks = list(chunker.chunk(dl_doc=result.document))
                
                all_chunks.extend(chunks)
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {pdf_file.name}: {e}")
            finally:
                self.logger.info(f"üîπ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(chunks)} —á–∞–Ω–∫–æ–≤ –∏–∑: {pdf_file.name}")

        self.logger.info(f"‚úÖ –í—Å–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(all_chunks)} —á–∞–Ω–∫–æ–≤ –∏–∑ {len(pdf_files)} —Ñ–∞–π–ª–æ–≤")
        return all_chunks